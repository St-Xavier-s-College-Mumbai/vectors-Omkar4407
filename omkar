#include <iostream>
#include <fstream>
#include <vector>
#include <string>
using namespace std;

// Define a structure to hold student data
struct Student {
    int ID;
    string Name;
    int Age;
    string Major;
    float GPA;
};

// Function to read students from the CSV file
void readCSV(const string& filename, vector<Student>& students) {
    ifstream file(filename);
    if (!file.is_open()) {
        cout << "Error: Could not open file " << filename << endl;
        return;
    }

    string line;
    getline(file, line); // Skip the header line

    while (getline(file, line)) {
        Student student;
        size_t pos = 0;

        // Extract ID
        pos = line.find(',');
        student.ID = stoi(line.substr(0, pos));
        line.erase(0, pos + 1);

        // Extract Name
        pos = line.find(',');
        student.Name = line.substr(0, pos);
        line.erase(0, pos + 1);

        // Extract Age
        pos = line.find(',');
        student.Age = stoi(line.substr(0, pos));
        line.erase(0, pos + 1);

        // Extract Major
        pos = line.find(',');
        student.Major = line.substr(0, pos);
        line.erase(0, pos + 1);

        // Extract GPA
        student.GPA = stof(line);

        students.push_back(student);
    }

    file.close();
}

// Function to display all students
void displayStudents(const vector<Student>& students) {
    cout << "Total Students: " << students.size() << endl;
    for (size_t i = 0; i < students.size(); ++i) {
        cout << "ID: " << students[i].ID
             << ", Name: " << students[i].Name
             << ", Age: " << students[i].Age
             << ", Major: " << students[i].Major
             << ", GPA: " << students[i].GPA << endl;
    }
}

// Function to filter students based on GPA
void filterStudents(const vector<Student>& students, vector<Student>& filtered, float minGPA) {
    for (size_t i = 0; i < students.size(); ++i) {
        if (students[i].GPA > minGPA) {
            filtered.push_back(students[i]);
        }
    }
}

// Function to calculate the average age of students
float calculateAverageAge(const vector<Student>& students) {
    if (students.empty()) return 0;

    int totalAge = 0;
    for (size_t i = 0; i < students.size(); ++i) {
        totalAge += students[i].Age;
    }

    return static_cast<float>(totalAge) / students.size();
}

// Function to write filtered students to a new CSV file
void writeCSV(const string& filename, const vector<Student>& students) {
    ofstream file(filename);
    if (!file.is_open()) {
        cout << "Error: Could not write to file " << filename << endl;
        return;
    }

    file << "ID,Name,Age,Major,GPA\n";
    for (size_t i = 0; i < students.size(); ++i) {
        file << students[i].ID << ","
             << students[i].Name << ","
             << students[i].Age << ","
             << students[i].Major << ","
             << students[i].GPA << endl;
    }

    file.close();
}

int main() {
    vector<Student> students;
    vector<Student> filteredStudents;
    string inputFile = "students.csv";
    string outputFile = "filtered_students.csv";

    // Step 1: Read data from CSV
    readCSV(inputFile, students);

    // Step 2: Display total number of students and their details
    displayStudents(students);

    // Step 3: Filter students with GPA > 3.0
    filterStudents(students, filteredStudents, 3.0);
    cout << "\nFiltered Students (GPA > 3.0):" << endl;
    displayStudents(filteredStudents);

    // Step 4: Calculate and print average age
    float averageAge = calculateAverageAge(students);
    cout << "\nAverage Age of Students: " << averageAge << endl;

    // Step 5: Write filtered students to a new CSV file
    writeCSV(outputFile, filteredStudents);

    return 0;
}
